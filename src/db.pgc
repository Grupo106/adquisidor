/* vim: set ft=c: */
#include <assert.h>
#include <string.h>
#include <arpa/inet.h>

#include "db.h"
#include "paquete.h"

EXEC SQL BEGIN DECLARE SECTION;
    char _src[INET_ADDRSTRLEN],
         _dst[INET_ADDRSTRLEN];
    int _sport,
        _dport,
        _bytes,
        _protocol;
    const char *_insert_stmt =
    "INSERT INTO traffic (src, dst, sport, dport, bytes, protocol) \
     VALUES(?, ?, ?, ?, ?, ?);";
EXEC SQL END DECLARE SECTION;

EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;


/**
* imprimir()
* ---------------------------------------------------------------------------
* Imprime paquete en la salida estandar
*/
void imprimir(t_paquete *paquete) {
    // imprimir paquete
    char src[INET_ADDRSTRLEN], dst[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(paquete->src), src, INET_ADDRSTRLEN);
    inet_ntop(AF_INET, &(paquete->dst), dst, INET_ADDRSTRLEN);
    printf("paquete src:%s, dst:%s, sport:%d, dport:%d, bytes:%d, \
protocol:%d\n",
           src,
           dst,
           paquete->sport,
           paquete->dport,
           paquete->bytes,
           paquete->protocol);
}

/**
 * bd_conectar()
 * -------------------------------------------------------------------------
 * Conecta con la base de datos
 */
int bd_conectar() {
    //ECPGdebug(1, stderr);
    EXEC SQL CONNECT TO POSTGRES_CONNECTION_STRING USER POSTGRES_USER/
                                                        POSTGRES_PASSWD;
    return sqlca.sqlcode;
}

/**
 * bd_desconectar()
 * -------------------------------------------------------------------------
 * Desconecta con la base de datos
 */
void bd_desconectar() {
    EXEC SQL DISCONNECT ALL;
}

/**
 * bd_insertar(t_paquete*)
 * -------------------------------------------------------------------------
 * Inserta un paquete en el almacen de datos.
 * Luego de insertar los paquetes es necesario hacer un commit()
 */
void bd_insertar(t_paquete *paquete) {
    assert(paquete != NULL);
    /* Preparo sentencia insert */
    EXEC SQL PREPARE _insert FROM :_insert_stmt;
    /* Preparo parametros */
    inet_ntop(AF_INET, &(paquete->src), _src, INET_ADDRSTRLEN);
    inet_ntop(AF_INET, &(paquete->dst), _dst, INET_ADDRSTRLEN);
    assert(strlen(_src) > 0);
    assert(strlen(_dst) > 0);
    _sport = paquete->sport;
    _dport = paquete->dport;
    _bytes = paquete->bytes;
    _protocol = paquete->protocol;
    /* Ejecuto sentencia */
    EXEC SQL EXECUTE _insert
         USING :_src, :_dst, :_sport, :_dport, :_bytes, :_protocol;
    /* Libero recursos */
    EXEC SQL DEALLOCATE PREPARE _insert;
    #ifdef DEBUG
        imprimir(paquete);
    #endif
}

/**
 * bd_commit()
 * -------------------------------------------------------------------------
 * Hace un commit de la transaccion en la base de datos
 */
void bd_commit() {
    EXEC SQL COMMIT;
}
