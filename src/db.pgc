/* vim: set ft=c: */
#include <assert.h>
#include <syslog.h>
#include <stdlib.h>
#include <arpa/inet.h>

#include "db.h"
#include "paquete.h"

/**
 * print_sqlca()
 * -------------------------------------------------------------------------
 * Imprime error en caso de ocurrir alguno
 */
void print_sqlca();


EXEC SQL WHENEVER SQLERROR CALL print_sqlca();
EXEC SQL WHENEVER SQLWARNING SQLPRINT;


/**
* imprimir()
* ---------------------------------------------------------------------------
* Imprime paquete en la salida estandar
*/
void imprimir(struct paquete *paquete) {
    // imprimir paquete
    char src[INET_ADDRSTRLEN], dst[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(paquete->ip_origen), src, INET_ADDRSTRLEN);
    inet_ntop(AF_INET, &(paquete->ip_destino), dst, INET_ADDRSTRLEN);
    printf("%s - %15s:%-5d -> %15s:%-5d - %d bytes - %s\n",
           paquete->protocolo == 6 ? "TCP" : "UDP",
           src,
           paquete->puerto_origen,
           dst,
           paquete->puerto_destino,
           paquete->bytes,
           paquete->direccion == SALIENTE ? "saliente(1)" : "entrante(0)");
}

/**
 * bd_conectar()
 * -------------------------------------------------------------------------
 * Conecta con la base de datos
 */
int bd_conectar() {
    EXEC SQL CONNECT TO POSTGRES_CONNECTION_STRING USER POSTGRES_USER/
                                                        POSTGRES_PASSWD;
    if(sqlca.sqlcode == 0) syslog(LOG_INFO, "Base de datos conectada");
    return sqlca.sqlcode;
}

/**
 * bd_desconectar()
 * -------------------------------------------------------------------------
 * Desconecta con la base de datos
 */
void bd_desconectar() {
    EXEC SQL DISCONNECT ALL;
    syslog(LOG_INFO, "Base de datos desconectada");
}

/**
 * bd_insertar(t_paquete*)
 * -------------------------------------------------------------------------
 * Inserta un paquete en el almacen de datos.
 * Luego de insertar los paquetes es necesario hacer un commit()
 */
void bd_insertar(struct paquete *paquete) {
    /* declaro variables que seran usadas en la consulta SQL */
    EXEC SQL BEGIN DECLARE SECTION;
        int _src;
        int _dst;
        int _sport;
        int _dport;
        int _bytes;
        int _protocol;
        int _dir;
        const char *_insert_stmt =
        "INSERT INTO paquetes (ip_origen, ip_destino, puerto_origen,"
        "                      puerto_destino, bytes, protocolo, direccion) "
        "VALUES(?, ?, ?, ?, ?, ?, ?);";
    EXEC SQL END DECLARE SECTION;
    assert(paquete != NULL);
    /* Preparo sentencia insert */
    EXEC SQL PREPARE _insert FROM :_insert_stmt;
    /* Preparo parametros */
    _src = ntohl(paquete->ip_origen.s_addr);
    _dst = ntohl(paquete->ip_destino.s_addr);
    _sport = paquete->puerto_origen;
    _dport = paquete->puerto_destino;
    _bytes = paquete->bytes;
    _protocol = paquete->protocolo;
    _dir = paquete->direccion;
    /* Ejecuto sentencia */
    EXEC SQL EXECUTE _insert USING :_src,
                                   :_dst,
                                   :_sport,
                                   :_dport,
                                   :_bytes,
                                   :_protocol,
                                   :_dir;
    /* Libero recursos */
    EXEC SQL DEALLOCATE PREPARE _insert;
    #ifdef DEBUG
        imprimir(paquete);
    #endif
}

/**
 * bd_commit()
 * -------------------------------------------------------------------------
 * Hace un commit de la transaccion en la base de datos
 */
void bd_commit() {
    EXEC SQL COMMIT;
}

/**
 * print_sqlca()
 * -------------------------------------------------------------------------
 * Imprime error en caso de ocurrir alguno
 */
void print_sqlca() {
    syslog(LOG_ERR, "==== sqlca ====\n");
    syslog(LOG_ERR, "sqlcode: %ld\n", sqlca.sqlcode);
    syslog(LOG_ERR, "sqlerrm.sqlerrml: %d\n", sqlca.sqlerrm.sqlerrml);
    syslog(LOG_ERR, "sqlerrm.sqlerrmc: %s\n", sqlca.sqlerrm.sqlerrmc);
    syslog(LOG_ERR, "sqlerrd: %ld %ld %ld %ld %ld %ld\n", sqlca.sqlerrd[0],
                                                          sqlca.sqlerrd[1],
                                                          sqlca.sqlerrd[2],
                                                          sqlca.sqlerrd[3],
                                                          sqlca.sqlerrd[4],
                                                          sqlca.sqlerrd[5]);
    syslog(LOG_ERR, "sqlwarn: %d %d %d %d %d %d %d %d\n", sqlca.sqlwarn[0],
                                                          sqlca.sqlwarn[1],
                                                          sqlca.sqlwarn[2],
                                                          sqlca.sqlwarn[3],
                                                          sqlca.sqlwarn[4],
                                                          sqlca.sqlwarn[5],
                                                          sqlca.sqlwarn[6],
                                                          sqlca.sqlwarn[7]);
    syslog(LOG_ERR, "sqlstate: %5s\n", sqlca.sqlstate);
    syslog(LOG_ERR, "===============\n");
    exit(EXIT_FAILURE);
}
